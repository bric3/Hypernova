<?xml version="1.0"?>
<project name="Hypernova" default="jar" xmlns:ivy="antlib:org.apache.ivy.ant">
  <!-- Project-specific configuration -->
  <property name="package" value="hypernova"/>
  <property name="main.class" value="${package}.${ant.project.name}"/>
  <property name="jar.file" value="${ant.project.name}.jar"/>

  <!-- Standard Directory Layout -->
  <property name="src.dir" value="src"/>
  <property name="test.dir" value="test"/>
  <property name="build.dir" value="build"/>
  <property name="build.classes.dir" value="${build.dir}/classes"/>
  <property name="test.classes.dir" value="${build.dir}/test"/>
  <property name="dist.dir" value="dist"/>

  <!-- Targets -->

  <target name="resolve" description="Retrieve dependencies with ivy.">
    <ivy:resolve log="quiet"/>
    <ivy:cachepath conf="build" pathid="build.classpath"/>
    <ivy:cachepath conf="default" pathid="runtime.classpath"/>
    <ivy:cachefileset conf="default" setid="runtime.fileset"/>
    <ivy:cachepath conf="test" pathid="test.classpath"/>
  </target>

  <target name="compile" depends="resolve" description="Compile all sources.">
    <mkdir dir="${build.classes.dir}"/>
    <javac srcdir="${src.dir}" destdir="${build.classes.dir}"
	   optimize="on" debug="on" deprecation="on"
	   includeantruntime="false">
      <compilerarg value="-Xlint"/>
      <classpath refid="build.classpath"/>
    </javac>
    <copy todir="${build.classes.dir}">
      <fileset dir="${src.dir}" excludes="**/*.java"/>
    </copy>
  </target>

  <target name="jar" depends="compile"
	  description="Generate the jarfile distributable.">
    <jar destfile="${dist.dir}/${jar.file}" basedir="${build.classes.dir}">
      <zipgroupfileset refid="runtime.fileset"/>
      <manifest>
        <attribute name="Main-Class" value="${main.class}"/>
      </manifest>
    </jar>
  </target>

  <target name="run" depends="compile" description="Run the application.">
    <java classname="${main.class}" classpath="${build.classes.dir}"
	  fork="true">
      <jvmarg line="-Xdebug -Xrunjdwp:transport=dt_socket,address=9000,server=y,suspend=n"/>
      <classpath refid="build.classpath"/>
      <arg value="--debug"/>
      <arg value="--repl"/>
    </java>
  </target>

  <target name="hotswap" depends="compile">
    <taskdef name="hotswap" classname="dak.ant.taskdefs.Hotswap"/>
    <antcall target="compile"/>
    <hotswap verbose="true" port="9000">
      <fileset dir="${build.classes.dir}" includes="**/*.class">
	<modified/>
      </fileset>
    </hotswap>
  </target>

  <target name="clean" description="Delete all generated files.">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
  </target>

  <target name="javadoc" description="Generate Javadoc HTML.">
    <javadoc destdir="${dist.dir}/javadoc">
      <fileset dir="${src.dir}" includes="**/*.java" />
    </javadoc>
  </target>

  <target name="format" description="Run the indenter on all source files.">
    <apply executable="astyle">
      <arg value="--mode=java"/>
      <arg value="--suffix=none"/>
      <fileset dir="${src.dir}" includes="**/*.java"/>
      <fileset dir="${test.dir}" includes="**/*.java"/>
    </apply>
  </target>

  <target name="check">
    <taskdef resource="checkstyletask.properties"
             classpathref="build.classpath"/>
    <checkstyle config="doc/sun_checks.xml">
      <fileset dir="src" includes="**/*.java"/>
    </checkstyle>
  </target>

  <!-- JUnit -->

  <target name="test-compile" depends="compile">
    <mkdir dir="${test.classes.dir}"/>
    <javac srcdir="${test.dir}" destdir="${test.classes.dir}"
	   classpath="${build.classes.dir}" includeantruntime="yes">
      <compilerarg value="-Xlint"/>
      <classpath refid="build.classpath"/>
      <classpath refid="test.classpath"/>
    </javac>
  </target>

  <target name="test" depends="test-compile" description="Run all tests.">
    <junit fork="yes">
      <classpath>
        <pathelement path="${build.classes.dir}"/>
        <pathelement path="${test.classes.dir}"/>
        <path refid="test.classpath"/>
      </classpath>
      <batchtest>
	<formatter type="brief" usefile="false"/>
	<fileset dir="${test.classes.dir}"/>
      </batchtest>
    </junit>
  </target>
</project>
