<?xml version="1.0"?>
<project name="Hypernova" default="jar" xmlns:ivy="antlib:org.apache.ivy.ant">
  <!-- Project-specific configuration -->
  <property name="package" value="hypernova"/>
  <property name="main.class" value="${package}.${ant.project.name}"/>
  <property name="jar.file" value="${ant.project.name}.jar"/>

  <!-- Standard Directory Layout -->
  <property name="src.dir" value="src"/>
  <property name="test.dir" value="test"/>
  <property name="build.dir" value="build"/>
  <property name="build.classes.dir" value="${build.dir}/classes"/>
  <property name="test.classes.dir" value="${build.dir}/test"/>
  <property name="dist.dir" value="dist"/>
  <property name="lib.dir" value="lib"/>
  <property name="doc.dir" value="doc"/>

  <!-- Project classpath -->
  <available file="${lib.dir}" property="lib.present"/>
  <path id="build.classpath">
    <fileset dir="${lib.dir}">
      <include name="*.jar"/>
    </fileset>
  </path>

  <!-- Additional build tools -->
  <taskdef resource="checkstyletask.properties"/>

  <!-- Targets -->

  <target name="init">
    <mkdir dir="${build.classes.dir}"/>
    <mkdir dir="${dist.dir}"/>
  </target>

  <target name="resolve" unless="lib.present"
	  description="Retrieve dependencies with ivy.">
    <ivy:retrieve type="jar,bundle"/>
  </target>

  <target name="compile" depends="init,resolve"
	  description="Compile all source files.">
    <javac srcdir="${src.dir}" destdir="${build.classes.dir}"
	   optimize="on" debug="on" deprecation="on"
	   includeantruntime="false">
      <compilerarg value="-Xlint"/>
      <classpath refid="build.classpath"/>
    </javac>
    <copy todir="${build.classes.dir}">
      <fileset dir="${src.dir}" excludes="**/*.java"/>
    </copy>
  </target>

  <target name="jar" depends="compile"
	  description="Generate the jarfile distributable.">
    <jar destfile="${dist.dir}/${jar.file}" basedir="${build.classes.dir}">
      <zipgroupfileset dir="${lib.dir}" includes="*.jar"/>
      <manifest>
        <attribute name="Main-Class" value="${main.class}"/>
      </manifest>
    </jar>
  </target>

  <target name="run" depends="jar" description="Run the application.">
    <java jar="${dist.dir}/${jar.file}" fork="true"/>
  </target>

  <target name="clean" description="Delete all generated files.">
    <delete dir="${doc.dir}/javadoc"/>
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
  </target>

  <target name="clean-all" depends="clean"
	  description="Fully clear out everything.">
    <delete dir="${lib.dir}"/>
  </target>

  <target name="javadoc" description="Generate Javadoc HTML.">
    <javadoc destdir="${doc.dir}/javadoc">
      <fileset dir="${src.dir}" includes="**/*.java" />
    </javadoc>
  </target>

  <target name="format" description="Run the indenter on all source files.">
    <apply executable="astyle">
      <arg value="--mode=java"/>
      <arg value="--suffix=none"/>
      <fileset dir="${src.dir}" includes="**/*.java"/>
      <fileset dir="${test.dir}" includes="**/*.java"/>
    </apply>
  </target>

  <target name="check">
    <checkstyle config="doc/sun_checks.xml">
      <fileset dir="src" includes="**/*.java"/>
    </checkstyle>
  </target>

  <!-- JUnit -->

  <target name="test-init" depends="init">
    <mkdir dir="${test.classes.dir}"/>
  </target>

  <target name="test-compile" depends="test-init,compile">
    <javac srcdir="${test.dir}" destdir="${test.classes.dir}"
	   classpath="${build.classes.dir}" includeantruntime="yes">
      <compilerarg value="-Xlint"/>
    </javac>
  </target>

  <target name="test" depends="test-compile" description="Run all tests.">
    <junit>
      <classpath>
	<pathelement path="${build.classes.dir}"/>
	<pathelement path="${test.classes.dir}"/>
      </classpath>
      <batchtest>
	<formatter type="brief" usefile="false"/>
	<fileset dir="${test.classes.dir}"/>
      </batchtest>
    </junit>
  </target>
</project>
